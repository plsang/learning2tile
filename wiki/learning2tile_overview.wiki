#labels Featured
#Learning to tile guild.

=== 1) Install R ===

Download and install R from http://www.r-project.org/

=== 2) Download the source archive ===

  # Download the example archive here from [http://code.google.com/p/learning2tile/downloads/detail?name=learning2tile_v1.0_example.zip&can=2&q=#makechanges here] which comes with an example of 15 scene dataset (4,485 scene images
from 15 categories).
  # Unzip the archive in a folder.
    * rectangle_mask_4x4 is the pre-computed mask file each for an image.
    * The file name ending with ".r" and ".java" are source files.
    * "labels.labels" is the class label file.
    * "partition[1-5].par" are the training and test partition used in the cross validation.

=== 3) Execute the code  ===

==== On a Windows machine ====
  # Double click the file ".RData"
  # Type the command and follow the instructions to download the dependent libraries.
    <code language="R">
    install.packages("gplots")
    install.packages("Matrix")
    install.packages("tseries")
    </code>
  # Type the command in the opened console.
    <code language="R">
    #load the source packages
    source("costfun_lib.r")
    source("tiling_lib.r")
    source("bow_lib.r")
    ############ Mask = Rectangle_4x4 ####################
    spbowdir <- "rectangle_mask_4x4\\"
    report_filename <- "rectangle_4x4_report.pdf"   #name of the final report
    para_lambda <- 0.0012    #the regularization parameter in the cost function
    t1 <- proc.time()
    #the fold number in cross validation
    foldnum = 5
    #the number of centroids in clustering = the size of the vocabulary
    DIM=1024
    #load the cross validation partition
    partations <- list()
    for(i in 1:foldnum) {
    	partations[[i]] <- read.table(paste("partation",i,".par",sep=""))
    }
    #load the label file
    label.table <- read.table("labels.labels")
    label.binmatrix <- ToBinaryLabel(label.table)
    #load the spbow (mask tilings)
    spbow.list = list()
    for(i in 1:nrow(label.table)) {
    	spbow.list[[i]] = as.vector(read.matrix(paste(spbowdir, label.table[i,1],".spbow",sep="")))
    }
    #load the condidate tilings 
    tilingfuns <- read.matrix("http://learning2tile.googlecode.com/svn/wiki/tilingfuns/rectangle_4x4_equal_tiling.txt")
    t2 <- proc.time()
    #compute the fitness (minus cost) for each candidate tiling
    fitness <- FindBestFSTiling(spbow.list, partations, label.binmatrix, tilingfuns, dim=DIM, lambda = para_lambda)
    t3 <- proc.time()
    #generate the final pdf report
    report <- GenTilingReport(tilingfuns,fitness, tiling_style = "square", tiling_paras=c(4,4), save.filename=report_filename, lambda = para_lambda)
    #print the run-time information
    print(paste("Learning finished. Please find the learned tilings in ", report_filename, ".", sep=""))
    print(paste("Run time : ", t3[1]-t1[1], "s", sep=""))
    print(paste("I/O time : ", t2[1]-t1[1], "s", sep=""))
    print(paste("Learning time : ", t3[1]-t2[1], "s", sep=""))
    
    </code>
  # Once finished, it will generates the report and print the running time for both I/O and learning process.
   <Module>
<ModulePrefs title="Google Gadget to add iframe within Google Sites" title_url="http://sites.google.com/site/annuairevin/" height="900" width="800" scrolling="false" directory_title="Google Gadget to add iframe within Google Sites" description="Add Google Gadget within A Google Site page" screenshot="http://www.liens-du-vin.ch/_pic061/my_gadgets_thumb.png" thumbnail="http://www.liens-du-vin.ch/_pic061/my_gadgets_thumb.png" author="Philippe Chappuis" author_email="info+gadgetCSE@liens-du-vin.ch" author_affiliation="Google" author_location="Rolle Switzerland" author_link="http://www.liens-du-vin.ch" author_photo="http://www.liens-du-vin.ch/_pic02/gadget-author-photo.png" author_aboutme="An Engineer who likes to develop for the Net and tastes wines" author_quote="A chief is a man who assumes responsibility. He says "I was beaten" he does not say "My men were beaten" - Antoine de Saint-Exupery"></ModulePrefs>
<UserPref name="File" display_name="File (*.htm)" required="true" default_value="http://viti-vino.blogspot.com"/>
<UserPref name="Text" display_name="Text" required="true" default_value="Inserting a blog within a Site."/>
<UserPref name="FHeight" display_name="Frame Height" required="true" default_value="600"/>
<UserPref name="FWidth" display_name="Frame Width" required="true" default_value="728"/>
<UserPref name="FScroll" display_name="Frame Scroll" required="true" default_value="yes"/>
<UserPref name="ContainerCol" display_name="Container Color" required="true" default_value="#d1dae3"/>
<Content type="html">
<![CDATA[
<style type="text/css"> body { background-color: __UP_ContainerCol__; padding: 0; margin:0; } iframe { overflow-x: auto; overflow-y: auto; } </style> <div id="my_frame"></div> <script type="text/javascript"> var prefs = new _IG_Prefs(__MODULE_ID__); var s_url = _trim(prefs.getString("File")); s_url = s_url.replace("'"," "); s_url = s_url.replace(" ","%20"); var s_tex = _trim(prefs.getString("Text")); s_tex=s_tex.replace("'"," "); var s_hei = _trim(prefs.getString("FHeight")); if (s_hei != parseInt(s_hei)){s_hei=100;}; var s_whi = _trim(prefs.getString("FWidth")); if (s_whi != parseInt(s_whi)){s_whi=100;}; var s_scr = _trim(prefs.getString("FScroll")); var html = "<iframe src='" + s_url + "' " + "frameborder='0' style='margin: auto; text-align: center;' allowtransparency='true' " + "width='" + s_whi + "' height='" + s_hei + "' scrolling='" + s_scr + "'>" + s_tex + "</iframe>"; _gel("my_frame").innerHTML=html; </script>
]]>
</Content>
</Module>


==== On a Linux machine ====

=== Discussion ===

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages
#labels Featured
#Overview

=== 1) Install R ===

Download and install R from http://www.r-project.org/

=== 2) Download the source archive ===

  # Download the example archive here from [http://code.google.com/p/learning2tile/downloads/detail?name=learning2tile_v1.0_example.zip&can=2&q=#makechanges here] which comes with an example of 15 scene dataset.
  # Unzip the archive in a folder.
    * rectangle_mask_4x4 is the pre-computed mask file each for an image.
    * The file name ending with ".r" and ".java" are source files.
    * "labels.labels" is the class label file.
    * "partition[1-5].par" are the training and test partition used in the cross validation. 

=== 3) Execute the code  ===

==== On a Windows machine ====
  # Double click the file ".RData"
  # Type the command and follow the instructions to download the dependent libraries.
    <code language="R">
    install.packages("gplots")
    install.packages("Matrix")
    install.packages("tseries")
    </code>

  # Type the command in the opened console.
    <code language="R">
    #load the source packages
    source("costfun_lib.r")
    source("tiling_lib.r")
    source("bow_lib.r")

    ############ Mask = Rectangle_4x4 ####################
    spbowdir <- "rectangle_mask_4x4\\"

    #the fold number in cross validation
    foldnum = 5

    #the number of centroids in clustering = the size of the vocabulary
    DIM=1024


    #load the cross validation partition
    partations <- list()
    for(i in 1:foldnum) {
    	partations[[i]] <-                         read.table(paste("partation",i,".par",sep=""))
    }

#load the label file
label.table <- read.table("labels.labels")
label.binmatrix <- ToBinaryLabel(label.table)




    #load the spbow (mask tilings)
    spbow.list = list()

    for(i in 1:nrow(label.table)) {
    	spbow.list[[i]] = as.vector(read.matrix(paste(spbowdir,     label.table[i,1],".spbow",sep="")))
    }

    #load the condidate tilings 
    tilingfuns <-     read.matrix("http://learning2tile.googlecode.com/svn/wiki/tilingfuns/rec    tangle_4x4_equal_tiling.txt")

    #compute the fitness (minus cost) for each candidate tiling
    fitness <- FindBestFSTiling(spbow.list, partations, label.binmatrix,     tilingfuns, dim=DIM)

    #generate the final pdf report
    report <- GenTilingReport(tilingfuns,fitness, tiling_style = "square", tiling_paras=c(4,4), save.filename="rectangle_4x4_report.pdf")
    </code>

==== On a Linux machine ====

=== Discussion ===

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages